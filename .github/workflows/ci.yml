name: Multi-Agent CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  security-events: write
  actions: read

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Matrix build job for different model/prompt combinations
  matrix-build:
    name: Build & Test (${{ matrix.model }} - ${{ matrix.prompt }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        model: [o3, sonnet, opus]
        prompt: [baseline, cross, unified]
        python-version: ['3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      env:
        MODEL_TYPE: ${{ matrix.model }}
        PROMPT_TYPE: ${{ matrix.prompt }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.model }}-${{ matrix.prompt }}-py${{ matrix.python-version }}
        name: coverage-${{ matrix.model }}-${{ matrix.prompt }}
        fail_ci_if_error: false

  # Security scanning with Semgrep
  security-scan:
    name: Security Scan (Semgrep)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        generateSarif: true
        config: >-
          p/security-audit
      env:
        SEMGREP_RULES: p/security-audit
      continue-on-error: false  # Fail on security issues
      
    - name: Check Semgrep Results
      if: always()
      run: |
        if [ -f semgrep.sarif ]; then
          # Check for HIGH or CRITICAL findings
          HIGH_COUNT=$(jq '[.runs[].results[] | select(.level == "error" or .level == "warning") | select(.properties.severity == "HIGH" or .properties.severity == "CRITICAL")] | length' semgrep.sarif)
          if [ "$HIGH_COUNT" -gt 0 ]; then
            echo "❌ Found $HIGH_COUNT HIGH/CRITICAL security findings!"
            jq '.runs[].results[] | select(.properties.severity == "HIGH" or .properties.severity == "CRITICAL") | {rule: .ruleId, severity: .properties.severity, message: .message.text, location: .locations[0].physicalLocation.artifactLocation.uri}' semgrep.sarif
            exit 1
          else
            echo "✅ No HIGH/CRITICAL security findings"
          fi
        fi

  # Code quality checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install quality tools
      run: |
        pip install black ruff mypy bandit safety
    
    - name: Run Black formatter check
      run: black --check src/ tests/
      continue-on-error: true
    
    - name: Run Ruff linter
      run: ruff check src/ tests/
    
    - name: Run MyPy type checker
      run: mypy src/
      continue-on-error: true
    
    - name: Run Bandit security linter
      run: bandit -r src/ -ll
    
    - name: Check dependency vulnerabilities
      run: safety check

  # Docker build and push
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [matrix-build, security-scan, ui-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/mcp-backend:latest
          ghcr.io/${{ github.repository }}/mcp-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push UI Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./ui
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/mcp-ui:latest
          ghcr.io/${{ github.repository }}/mcp-ui:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install httpx
    
    # docker-compose v2 is pre-installed on ubuntu-latest; no apt-get needed
    - name: Start services
      env:
        PROJECT: ci_${{ github.run_id }}
      run: |
        docker compose -p $PROJECT -f docker-compose.test.yml down --remove-orphans || true
        docker compose -p $PROJECT -f docker-compose.test.yml up -d
        sleep 10
    
    - name: Run integration tests
      env:
        PROJECT: ci_${{ github.run_id }}
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/integration -v
        docker compose -p $PROJECT -f docker-compose.test.yml down --volumes

  # UI tests
  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
    
    - name: Install UI dependencies
      working-directory: ./ui
      run: npm ci
    
    - name: Build UI
      working-directory: ./ui
      run: npm run build
    
    - name: Install Playwright Browsers
      working-directory: ./ui
      run: npx playwright install --with-deps
    
    - name: Run Playwright tests
      working-directory: ./ui
      run: npm run test:e2e
      env:
        CI: true
    
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: ui/playwright-report/
        retention-days: 30

    # Add Lighthouse Performance Checks
    - name: Start Next.js server for Lighthouse
      working-directory: ./ui
      run: |
        npm run start &
        # Wait for server to be ready
        for i in {1..30}; do
          if curl -s http://localhost:3000 > /dev/null; then
            echo "Server is ready!"
            break
          fi
          echo "Waiting for server... attempt $i"
          sleep 2
        done

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v11
      with:
        urls: |
          http://localhost:3000
        uploadArtifacts: true
        temporaryPublicStorage: true
        configPath: ./ui/lighthouserc.json

    - name: Check Lighthouse Scores
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the lighthouse results
          const results = JSON.parse(fs.readFileSync('.lighthouseci/lhr-0.json', 'utf-8'));
          
          const scores = {
            performance: results.categories.performance.score * 100,
            accessibility: results.categories.accessibility.score * 100,
            'best-practices': results.categories['best-practices'].score * 100,
            seo: results.categories.seo.score * 100
          };
          
          console.log('Lighthouse Scores:', scores);
          
          // Check if scores meet requirements
          const failed = [];
          if (scores.performance < 90) failed.push(`Performance: ${scores.performance} < 90`);
          if (scores.accessibility < 90) failed.push(`Accessibility: ${scores.accessibility} < 90`);
          if (scores['best-practices'] < 90) failed.push(`Best Practices: ${scores['best-practices']} < 90`);
          if (scores.seo < 100) failed.push(`SEO: ${scores.seo} < 100`);
          
          if (failed.length > 0) {
            core.setFailed(`Lighthouse scores below threshold:\n${failed.join('\n')}`);
          }

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, code-quality]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment steps here

  # Documentation build and deploy
  docs:
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    needs: [matrix-build, ui-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git info
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install MkDocs and dependencies
      run: |
        pip install mkdocs-material
        pip install mkdocs-git-revision-date-plugin
        pip install mkdocs-mermaid2-plugin
        pip install mkdocs-awesome-pages-plugin
    
    - name: Build documentation
      run: mkdocs build
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        cname: mcp-docs.example.com  # Replace with your domain

  # Create release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [integration-tests, code-quality, docs]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Multi-Agent System Release
          
          ## Changes
          - Automated release from main branch
          - All tests passed
          - Security scans completed
          
          ## Docker Image
          `${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}`
        draft: false
        prerelease: false 