name: Multi-Agent CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  security-events: write
  actions: read

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Matrix build job for different model/prompt combinations
  matrix-build:
    name: Build & Test (${{ matrix.model }} - ${{ matrix.prompt }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        model: [o3, sonnet, opus]
        prompt: [baseline, cross, unified]
        python-version: ['3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
      env:
        MODEL_TYPE: ${{ matrix.model }}
        PROMPT_TYPE: ${{ matrix.prompt }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.model }}-${{ matrix.prompt }}-py${{ matrix.python-version }}
        name: coverage-${{ matrix.model }}-${{ matrix.prompt }}
        fail_ci_if_error: false

  # Security scanning with Semgrep
  security-scan:
    name: Security Scan (Semgrep)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Semgrep SAST scan
      uses: returntocorp/semgrep-action@v1
      continue-on-error: true
      with:
        config: >-
          p/security-audit
          p/python
          p/docker
          p/secrets
          p/owasp-top-ten
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    
    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true
      if: always()
      with:
        sarif_file: semgrep.sarif

  # Code quality checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install quality tools
      run: |
        pip install black ruff mypy bandit safety
    
    - name: Run Black formatter check
      run: black --check src/ tests/
      continue-on-error: true
    
    - name: Run Ruff linter
      run: ruff check src/ tests/
    
    - name: Run MyPy type checker
      run: mypy src/
      continue-on-error: true
    
    - name: Run Bandit security linter
      run: bandit -r src/ -ll
    
    - name: Check dependency vulnerabilities
      run: safety check

  # Docker build and push
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [matrix-build, security-scan]
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infra/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install httpx
    
    - name: Install docker-compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
    
    - name: Start services
      run: |
        PROJECT=ci_${{ github.run_id }}
        docker compose -p $PROJECT -f docker-compose.test.yml down --remove-orphans || true
        docker compose -p $PROJECT -f docker-compose.test.yml up -d
        sleep 10
    
    - name: Run integration tests
      run: |
        PROJECT=ci_${{ github.run_id }}
        pytest tests/integration/ -v || EXIT_CODE=$?
        docker compose -p $PROJECT -f docker-compose.test.yml down --volumes
        exit ${EXIT_CODE:-0}
      env:
        REDIS_URL: redis://localhost:6379

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, code-quality]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment steps here

  # Create release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [integration-tests, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Multi-Agent System Release
          
          ## Changes
          - Automated release from main branch
          - All tests passed
          - Security scans completed
          
          ## Docker Image
          `${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}`
        draft: false
        prerelease: false 